{
    "contents" : "#include <Rcpp.h>\n#include \"common.h\"\n#include \"utilities.h\"\n#include \"OptionParser.h\"\n#include \"TableCompiler.h\"\n#include \"Output.h\"\n#include \"ReadData.h\"\n#include \"prediction.h\"\n#include \"SNP.h\"\n\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nstd::string getResult(std::string fastaFilePath, std::string shapeType){\n  std::ifstream in_fstream(fastaFilePath.c_str());\n  std::string outputFile;\n  \n  if (!in_fstream){\n    Rcout << \"Cannot open the input file:  \" << fastaFilePath << std::endl;\n  \n  }else{ \n    \n    if(shapeType.compare(\"MGW\")==0 || shapeType.compare(\"Roll\")==0 || shapeType.compare(\"HelT\")==0 ||\n      shapeType.compare(\"ProT\")==0 || shapeType.compare(\"EP\")==0){\n        Rcout<< \"Reading the input sequence......\" << std::endl;\n        string_vector sequence_list;\n        string_vector name_list;\n        sequence_list.clear();\n        name_list.clear();\n        bool debug = true;\n        read_fasta(in_fstream, sequence_list, name_list,debug);\n    \n        outputFile = fastaFilePath + \".\" + shapeType;\n    \n        //build pentamers map\n        DNA_to_properties pentamers_map; \n        pentamers_map.clear();\n        build_unique_pentamers(pentamers_map);\n    \n        //load the query table from file\n        std::string querytable_filename = \"./inst/QueryTable.dat\"; //<- I don't know how to fetch the file path here!\n        \n        process_querytable_file(querytable_filename, pentamers_map, debug);\n    \n        //convert sequence_list to pointers_list\n        std::vector <pointers_vector> pointers_matrix;\n        std::vector <int_vector> status_matrix;\n        std::cout << \"Indexing the input sequence......\"<<std::endl;\n        convert_sequence_list(sequence_list,pointers_matrix,status_matrix,pentamers_map);\n        std::cout << \"Indexing complete\"<<std::endl;\n    \n        //run prediction  \n        std::stringstream current_ss;\n        std::cout << \"Processing......\"<<std::endl;\n\n        int output_width = 30;\n        char delimiter = ',';\n    \n        //run MGW\n        if(shapeType.compare(\"MGW\")==0){\n          current_ss.str(\"\");\n          current_ss.clear();\n          predict_groove_width(current_ss,pointers_matrix,status_matrix,name_list,debug,pentamers_map,\"minor\",output_width,delimiter);  \n          output_stringstream_to_file(current_ss,outputFile);\n    \n        //run Roll\n        }else if(shapeType.compare(\"Roll\")==0){\n          current_ss.str(\"\");\n          current_ss.clear();\n          predict_step_parameters(current_ss,pointers_matrix,status_matrix,name_list,debug,pentamers_map,\"roll\",output_width,delimiter);\n          output_stringstream_to_file(current_ss,outputFile);\n    \n        //run ProT\n        }else if(shapeType.compare(\"ProT\")==0){\n          current_ss.str(\"\");\n          current_ss.clear();\n          predict_groove_width(current_ss,pointers_matrix,status_matrix,name_list,debug,pentamers_map,\"propel\",output_width,delimiter);\n          output_stringstream_to_file(current_ss,outputFile);\n    \n        //run HelT\n        }else if(shapeType.compare(\"HelT\")==0){\n          current_ss.str(\"\");\n          current_ss.clear();\n          predict_step_parameters(current_ss,pointers_matrix,status_matrix,name_list,debug,pentamers_map,\"twist\",output_width,delimiter);\n          output_stringstream_to_file(current_ss,outputFile);\n    \n      //run EP\n      }else if(shapeType.compare(\"EP\")==0){\n        current_ss.str(\"\");\n        current_ss.clear();\n        predict_groove_width(current_ss,pointers_matrix,status_matrix,name_list,debug,pentamers_map,\"ep\",output_width,delimiter);  \n        output_stringstream_to_file(current_ss,outputFile);\n      }\n      \n    }else{\n      Rcout << \"Cannot recogize the shape type(MGW/Roll/HelT/ProT/EP):\" << shapeType << std::endl; \n    }\n  }\n  \n  return outputFile;\n}\n",
    "created" : 1431247012896.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2520118204",
    "id" : "641250F9",
    "lastKnownWriteTime" : 1431380559,
    "path" : "~/rdnashape/src/ShapePrediction.cpp",
    "project_path" : "src/ShapePrediction.cpp",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "cpp"
}